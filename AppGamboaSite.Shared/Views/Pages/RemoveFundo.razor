@page "/remove-imagem"

<style>
    body {
        font-family: 'Inter', sans-serif;
        background-color: #f3f4f6; /* Fundo cinza claro */
    }
    .container {
        max-width: 800px;
        margin: 2rem auto;
        padding: 2rem;
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    canvas {
        display: block;
        max-width: 100%;
        border-radius: 0.375rem;
        border: 1px solid #e5e7eb; /* Borda cinza claro */
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .controls > * + * {
        margin-left: 0.5rem;
    }
    .btn {
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .btn-primary {
        background-color: #4f46e5; /* Roxo */
        color: white;
    }
    .btn-primary:hover {
        background-color: #4338ca;
    }
    .btn-secondary {
        background-color: #6b7280; /* Cinza */
        color: white;
    }
    .btn-secondary:hover {
        background-color: #4b5563;
    }
    .file-input-label {
        padding: 0.75rem 1.5rem;
        border-radius: 0.375rem;
        background-color: #2563eb; /* Azul */
        color: white;
        cursor: pointer;
        display: inline-block;
    }
    .file-input-label:hover {
        background-color: #1d4ed8;
    }
    input[type="file"] {
        display: none;
    }
    .slider-container {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .slider-container label {
        display: block;
        margin-bottom: 0.5rem;
        color: #374151; /* Cinza escuro */
    }
    .color-picker-container {
        margin-top: 1rem;
        margin-bottom: 1rem;
    }
    .color-picker-container label {
        display: block;
        margin-bottom: 0.5rem;
        color: #374151; /* Cinza escuro */
    }
    .color-preview {
        width: 30px;
        height: 30px;
        border: 1px solid #ccc;
        display: inline-block;
        vertical-align: middle;
        margin-left: 10px;
        border-radius: 0.25rem;
    }
    #loadingIndicator {
        display: none;
        margin-top: 1rem;
        color: #1f2937; /* Cinza muito escuro */
    }
    .preview-container {
        border: 2px dashed #ccc;
        padding: 10px;
        margin-top: 1rem;
        border-radius: 0.375rem;
        background-image:
            linear-gradient(45deg, #eee 25%, transparent 25%),
            linear-gradient(-45deg, #eee 25%, transparent 25%),
            linear-gradient(45deg, transparent 75%, #eee 75%),
            linear-gradient(-45deg, transparent 75%, #eee 75%);
        background-size: 20px 20px;
        background-position: 0 0, 0 10px, 10px -10px, -10px 0px;
    }
</style>
<div class="container mx-auto p-4 sm:p-8 bg-white shadow-lg rounded-lg">
    <header class="mb-6 text-center">
        <h1 class="text-2xl sm:text-3xl font-bold text-gray-800">Ferramenta de Remoção de Fundo</h1>
        <p class="text-gray-600 mt-2">Carregue sua imagem e remova a cor de fundo desejada.</p>
    </header>

    <div class="mb-6 text-center">
        <label for="imageLoader" class="btn btn-primary file-input-label">Carregar Imagem</label>
        <input type="file" id="imageLoader" accept="image/*" />
        <p id="fileName" class="text-sm text-gray-500 mt-2"></p>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <div class="slider-container">
            <label for="tolerance" class="block text-sm font-medium text-gray-700">Tolerância (<span id="toleranceValue">20</span>):</label>
            <input type="range" id="tolerance" min="0" max="255" value="20" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer">
            <p class="text-xs text-gray-500 mt-1">Ajuste para incluir tons semelhantes. Valores mais altos removem mais cores.</p>
        </div>
        <div class="color-picker-container">
            <label for="colorToReplace" class="block text-sm font-medium text-gray-700">Cor a ser removida:</label>
            <div class="flex items-center">
                <input type="color" id="colorToReplace" value="#FFFFFF" class="w-12 h-10 p-1 border border-gray-300 rounded-md cursor-pointer">
                <span id="colorPreview" class="color-preview ml-2" style="background-color: #FFFFFF;"></span>
                <button id="pickColorButton" class="btn btn-secondary ml-3 text-sm py-2 px-3">Selecionar Cor da Imagem</button>
            </div>
            <p class="text-xs text-gray-500 mt-1">Clique no botão e depois na imagem para selecionar a cor.</p>
        </div>
    </div>

    <div id="loadingIndicator" class="text-center py-4 text-gray-700">
        <svg class="animate-spin h-5 w-5 mr-3 inline-block" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        Processando imagem...
    </div>

    <div class="preview-container">
        <canvas id="imageCanvas"></canvas>
    </div>
    <p id="canvasInstructions" class="text-sm text-gray-500 text-center mt-2">Clique na imagem para selecionar a cor de fundo (após carregar uma imagem e clicar em "Selecionar Cor da Imagem").</p>


    <div class="mt-8 text-center controls">
        <button id="processButton" class="btn btn-primary" disabled>Remover Fundo</button>
        <a id="downloadLink" class="btn btn-secondary" style="display: none;">Baixar Imagem</a>
    </div>

    <div id="messageBox" class="fixed bottom-5 right-5 bg-red-500 text-white p-3 rounded-lg shadow-md hidden animate-pulse">
        <p id="messageText"></p>
    </div>
</div>

<script>
    const imageLoader = document.getElementById('imageLoader');
    const imageCanvas = document.getElementById('imageCanvas');
    const ctx = imageCanvas.getContext('2d', { willReadFrequently: true }); // willReadFrequently para performance
    const processButton = document.getElementById('processButton');
    const downloadLink = document.getElementById('downloadLink');
    const toleranceSlider = document.getElementById('tolerance');
    const toleranceValueDisplay = document.getElementById('toleranceValue');
    const colorToReplaceInput = document.getElementById('colorToReplace');
    const colorPreview = document.getElementById('colorPreview');
    const pickColorButton = document.getElementById('pickColorButton');
    const fileNameDisplay = document.getElementById('fileName');
    const loadingIndicator = document.getElementById('loadingIndicator');
    const canvasInstructions = document.getElementById('canvasInstructions');
    const messageBox = document.getElementById('messageBox');
    const messageText = document.getElementById('messageText');

    let originalImage = null;
    let pickingColor = false;

    // Atualiza o valor da tolerância exibido
    toleranceSlider.addEventListener('input', (e) => {
        toleranceValueDisplay.textContent = e.target.value;
    });

    // Atualiza a pré-visualização da cor selecionada
    colorToReplaceInput.addEventListener('input', (e) => {
        colorPreview.style.backgroundColor = e.target.value;
    });

    // Função para exibir mensagens customizadas
    function showMessage(message, duration = 3000) {
        messageText.textContent = message;
        messageBox.classList.remove('hidden');
        setTimeout(() => {
            messageBox.classList.add('hidden');
        }, duration);
    }

    // Carrega a imagem no canvas
    imageLoader.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            fileNameDisplay.textContent = `Arquivo: ${file.name}`;
            const reader = new FileReader();
            reader.onload = (event) => {
                originalImage = new Image();
                originalImage.onload = () => {
                    // Limitar o tamanho máximo do canvas para performance e visualização
                    const MAX_WIDTH = 800;
                    const MAX_HEIGHT = 600;
                    let width = originalImage.width;
                    let height = originalImage.height;

                    if (width > height) {
                        if (width > MAX_WIDTH) {
                            height *= MAX_WIDTH / width;
                            width = MAX_WIDTH;
                        }
                    } else {
                        if (height > MAX_HEIGHT) {
                            width *= MAX_HEIGHT / height;
                            height = MAX_HEIGHT;
                        }
                    }
                    imageCanvas.width = width;
                    imageCanvas.height = height;
                    ctx.drawImage(originalImage, 0, 0, width, height);
                    processButton.disabled = false;
                    downloadLink.style.display = 'none';
                    canvasInstructions.style.display = 'block';
                }
                originalImage.onerror = () => {
                    showMessage("Erro ao carregar a imagem. Verifique o formato do arquivo.");
                    processButton.disabled = true;
                }
                originalImage.src = event.target.result;
            }
            reader.readAsDataURL(file);
        } else {
            fileNameDisplay.textContent = "";
            processButton.disabled = true;
        }
    });

    // Ativa o modo de seleção de cor
    pickColorButton.addEventListener('click', () => {
        if (!originalImage) {
            showMessage("Carregue uma imagem primeiro!");
            return;
        }
        pickingColor = true;
        imageCanvas.style.cursor = 'crosshair';
        canvasInstructions.textContent = 'Clique na imagem para selecionar a cor a ser removida.';
    });

    // Seleciona a cor do canvas ao clicar
    imageCanvas.addEventListener('click', (e) => {
        if (!pickingColor || !originalImage) return;

        const rect = imageCanvas.getBoundingClientRect();
        const x = Math.round(e.clientX - rect.left);
        const y = Math.round(e.clientY - rect.top);

        // Precisamos escalar as coordenadas do clique para as dimensões originais da imagem no canvas
        const scaleX = imageCanvas.width / rect.width;
        const scaleY = imageCanvas.height / rect.height;

        const canvasX = Math.round(x * scaleX);
        const canvasY = Math.round(y * scaleY);

        try {
            const pixel = ctx.getImageData(canvasX, canvasY, 1, 1).data;
            const hexColor = rgbToHex(pixel[0], pixel[1], pixel[2]);
            colorToReplaceInput.value = hexColor;
            colorPreview.style.backgroundColor = hexColor;
        } catch (error) {
            console.error("Erro ao pegar cor do pixel:", error);
            showMessage("Não foi possível selecionar a cor. Tente novamente.");
        } finally {
            pickingColor = false;
            imageCanvas.style.cursor = 'default';
            canvasInstructions.textContent = 'Clique na imagem para selecionar a cor de fundo (após carregar uma imagem e clicar em "Selecionar Cor da Imagem").';
        }
    });

    // Converte RGB para Hex
    function rgbToHex(r, g, b) {
        return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();
    }

    // Converte Hex para RGB
    function hexToRgb(hex) {
        const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }

    // Processa a imagem para remover o fundo
    processButton.addEventListener('click', () => {
        if (!originalImage) {
            showMessage("Por favor, carregue uma imagem primeiro.");
            return;
        }

        loadingIndicator.style.display = 'block';
        processButton.disabled = true;
        downloadLink.style.display = 'none';

        // Usar setTimeout para permitir que o DOM atualize e mostre o loading
        setTimeout(() => {
            try {
                // Redesenha a imagem original para garantir que estamos começando do zero
                ctx.clearRect(0, 0, imageCanvas.width, imageCanvas.height);
                ctx.drawImage(originalImage, 0, 0, imageCanvas.width, imageCanvas.height);

                const imageData = ctx.getImageData(0, 0, imageCanvas.width, imageCanvas.height);
                const data = imageData.data;
                const tolerance = parseInt(toleranceSlider.value);
                const colorToRemove = hexToRgb(colorToReplaceInput.value);

                if (!colorToRemove) {
                    showMessage("Cor inválida selecionada.");
                    loadingIndicator.style.display = 'none';
                    processButton.disabled = false;
                    return;
                }

                for (let i = 0; i < data.length; i += 4) {
                    const r = data[i];
                    const g = data[i + 1];
                    const b = data[i + 2];

                    // Calcula a diferença de cor
                    const diffR = Math.abs(r - colorToRemove.r);
                    const diffG = Math.abs(g - colorToRemove.g);
                    const diffB = Math.abs(b - colorToRemove.b);

                    // Se a diferença estiver dentro da tolerância, torna o pixel transparente
                    if (diffR <= tolerance && diffG <= tolerance && diffB <= tolerance) {
                        data[i + 3] = 0; // Define o canal alfa como 0 (transparente)
                    }
                }
                ctx.putImageData(imageData, 0, 0);
                downloadLink.href = imageCanvas.toDataURL('image/png'); // Salva como PNG para suportar transparência
                downloadLink.download = 'imagem_sem_fundo.png';
                downloadLink.style.display = 'inline-block';
                showMessage("Fundo removido! Você pode baixar a imagem.", 4000);
            } catch (error) {
                console.error("Erro ao processar imagem:", error);
                showMessage("Ocorreu um erro ao processar a imagem. Verifique o console para detalhes.");
            } finally {
                loadingIndicator.style.display = 'none';
                processButton.disabled = false;
            }
        }, 50); // Pequeno delay para renderização do loading
    });

</script>
@code {

}
