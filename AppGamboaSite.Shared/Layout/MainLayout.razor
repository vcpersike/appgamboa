@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <div class="d-none d-md-flex justify-content-center w-100">
            <MudBreadcrumbs Items="_items" Separator=""></MudBreadcrumbs>
        </div>
        
        <div class="d-flex d-md-none justify-center align-center mud-height-full">
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@(()=>ToggleDrawer(Anchor.Start))" />
        </div>
        <div class="d-flex d-md-none ms-auto align-items-center mud-height-full pe-3">
            Gamboa Solutions
        </div>
    </MudAppBar>
    <MudSwitch @bind-Value="_overlayAutoClose" Label="Overlay Autoclose" Color="Color.Secondary" />
    <MudDrawer @bind-Open="@_drawerOpen"
        Elevation="1"
               Variant="@DrawerVariant.Temporary" OverlayAutoClose="@_overlayAutoClose"
        Color="Color.Dark"
               Anchor="@_anchor">
        <MudNavMenu Margin="Margin.Dense">
            <MudNavLink Href="/counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Secondary">Counter</MudNavLink>
            <MudNavLink Href="/" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.LocalLibrary" IconColor="Color.Secondary">Home</MudNavLink>
            <MudNavLink Href="/weather" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.People" IconColor="Color.Secondary">Weather</MudNavLink>
        </MudNavMenu>
        
    </MudDrawer>
    <MudMainContent Class="pt-8 px-8">
        <MudContainer Class="mt-2">
        @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    private bool _drawerOpen = false;
    private Anchor _anchor;
    private bool _overlayAutoClose = true;
    private List<BreadcrumbItem> _items =
   [
       new("Home", href: "/",  icon: Icons.Material.Filled.Home),
        new("Counter", href: "/counter", icon: Icons.Material.Filled.VideoLibrary),
        new("Weather", href: "/weather", icon: Icons.Material.Filled.Create)
   ];

    private void ToggleDrawer(Anchor anchor)
    {
        _anchor = anchor;
        _drawerOpen = !_drawerOpen;
        StateHasChanged();
    }

    private ResizeObserver _resizeObserver;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _resizeObserver = await JSRuntime.InvokeAsync<ResizeObserver>("createResizeObserver",
                DotNetObjectReference.Create(this));
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    [JSInvokable]
    public void OnWindowResize(int width)
    {
        if (width >= 768 && _drawerOpen)
        {
            _drawerOpen = false;
            StateHasChanged();
        }
    }

    public class ResizeObserver { }
}